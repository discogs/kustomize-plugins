#!/usr/bin/env python
# Generates Kubernetes manifests from remote URLs

from __future__ import print_function
import base64
import errno
import hashlib
import os
import sys
from io import open


try:
    import requests
except ImportError:
    print("fatal: requests module is not installed. try `pip install requests`")
    sys.exit(1)

try:
    import yaml
except ImportError:
    print("fatal: pyyaml module is not installed. try `pip install pyyaml`")
    sys.exit(1)


# For Python 2 compatibility
# (IOError is not equivalent to FileNotFoundError in general, but for our
# needs it's fine)
try:
    FileNotFoundError
except NameError:
    FileNotFoundError = IOError


class IntegrityError(Exception):
    """Raised when a Subresource Integrity related error occurs."""


# https://www.w3.org/TR/SRI/#cryptographic-hash-functions
SRI_ALGOS = {
    "sha256": hashlib.sha256,
    "sha384": hashlib.sha384,
    "sha512": hashlib.sha512,
}

USE_CACHE = os.environ.get("DISCOGS_HTTPGENERATOR_V1_USE_CACHE", "true") != "false"
CACHE_DIR = os.path.join(
    os.environ.get("XDG_CACHE_HOME", os.path.expanduser("~/.cache")),
    "kustomize",
    "plugin",
    "platform.discogs.com",
    "v1",
    "httpgenerator",
)


# Mainly for Python 2 compatibility
def mkdir_p(path):
    """Create a directory if it doesn't exist already."""
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def sri_hash(content, algo):
    return base64.b64encode(SRI_ALGOS[algo](content).digest()).decode("ascii")


def sri_cache_key(integrity):
    return integrity.replace("/", "@")


def generate(generator):
    if USE_CACHE:
        mkdir_p(CACHE_DIR)

    common_headers = {"User-agent": "discogs-httpgenerator/v1"}
    common_headers.update(generator.get("headers", {}))

    for remote_resource in generator["resources"]:
        url = remote_resource["url"]

        headers = common_headers.copy()
        headers.update(remote_resource.get("headers", {}))

        integrity = remote_resource["integrity"]
        algo, _, expected_content_hash = integrity.partition("-")
        if algo not in SRI_ALGOS:
            raise IntegrityError(
                "Integrity hash algorithm not supported: given=%s supported=%s"
                % (algo, ",".join(SRI_ALGOS))
            )

        cached_resource_path = os.path.join(CACHE_DIR, sri_cache_key(integrity))
        try:
            if not USE_CACHE:
                raise FileNotFoundError

            with open(cached_resource_path, "rb") as f:
                content = f.read()

                # Sanity check: does the cached content match its integrity hash?
                cached_content_hash = sri_hash(content, algo)
                if expected_content_hash != cached_content_hash:
                    print(
                        "HTTPGenerator warning: Cached resource failed integrity check, "
                        "falling back to HTTP request: url=%s algo=%s expected=%s computed=%s"
                        % (url, algo, expected_content_hash, cached_content_hash),
                        file=sys.stderr,
                    )
                    raise FileNotFoundError
        except FileNotFoundError:
            response = requests.get(url, headers=headers)
            if not response.ok:
                response.raise_for_status()
            content = response.content
            if USE_CACHE:
                with open(cached_resource_path, "wb") as f:
                    f.write(content)

        content_hash = sri_hash(content, algo)

        if content_hash != expected_content_hash:
            raise IntegrityError(
                "Content failed integrity check: url=%s expected=%s computed=%s"
                % (url, expected_content_hash, content_hash)
            )

        if hasattr(sys.stdout, "buffer"):
            sys.stdout.buffer.write(content)
            sys.stdout.buffer.write("\n---\n".encode("ascii"))
        else:
            print(content)
            print("---")


if __name__ == "__main__":
    with open(sys.argv[1], "r", encoding="utf-8") as f:
        generate(yaml.safe_load(f))
