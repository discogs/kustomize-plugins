#!/usr/bin/env python
# Generates a Kubernetes Secret by reading data from Vault

from __future__ import print_function, unicode_literals

import base64
import os
import re
import subprocess
import sys
import yaml
from io import open


ENABLE_SUBSTITUTION = (
    os.environ.get("DISCOGS_VAULTSECRETGENERATOR_V1_ENABLE_SUBSTITUTION", "true")
    != "false"
)


class VaultRegexError(Exception):
    """Raised if there are no trappings around the secret data"""


def parse_path(path):
    path = path.group(1)
    path, _, field = path.partition("#")
    return subprocess.check_output(["vault", "read", "-field", field, path]).decode(
        "utf-8"
    )


VAULT_PATH_RE = re.compile(r"\$\((.+?)\)")


def generate_secret(generator):
    try:
        secret_type = generator["type"]
    except KeyError:
        secret_type = "Opaque"

    secret = {
        "apiVersion": "v1",
        "kind": "Secret",
        "metadata": {"name": generator["metadata"]["name"]},
        "data": {},
        "type": secret_type,
    }

    for key, value in generator.get("data", {}).items():
        if VAULT_PATH_RE.search(value):
            if ENABLE_SUBSTITUTION:
                value = VAULT_PATH_RE.sub(parse_path, value)
            secret["data"][key] = base64.b64encode(value.encode("utf-8")).decode(
                "utf-8"
            )
        else:
            raise VaultRegexError("$(...) was not found in {}: {}".format(key, value))

    if not generator.get("disableNameSuffixHash"):
        secret["metadata"].setdefault("annotations", {})[
            "kustomize.config.k8s.io/needs-hash"
        ] = "true"

    return secret


if __name__ == "__main__":
    with open(sys.argv[1], "r", encoding="utf-8") as f:
        print(yaml.safe_dump(generate_secret(yaml.safe_load(f))))
